using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LevelSelect_UIManager : MonoBehaviour
{
    private Vector2 UIWIDTH = new Vector2(2014,0);

    enum MENUSTATES {LEVEL1,LEVEL2,LEVEL3,LEVEL4,LEVELSET };
    MENUSTATES currentState;

    public GameObject level;
    public GameObject levelToLevelSet;
    public GameObject levelSet;
    public GameObject left;
    public GameObject right;

    float speed = 0.1f;
    float arrowAppear = 50;
    bool isInGameSelect = false;
    bool isRightClick;
    

    private void Awake()
    {
        currentState = MENUSTATES.LEVELSET;
    }

    private void Update()
    {
        switch (currentState)
        {
            case MENUSTATES.LEVELSET:
                {
                    level.SetActive(false);
                    left.SetActive(false);
                    right.SetActive(false);
                    levelToLevelSet.SetActive(false);
                    levelSet.SetActive(true);
                    isInGameSelect = false;

                    break;
                }
            case MENUSTATES.LEVEL1:
                {
                    level.SetActive(true);                
                    levelSet.SetActive(false);

                    if (!isInGameSelect)
                    {
                        left.SetActive(false);
                        right.SetActive(true);
                        levelToLevelSet.SetActive(true);
                        level.GetComponent<RectTransform>().anchoredPosition = UIWIDTH;
                    }
                    else
                    {
                        level.GetComponent<RectTransform>().anchoredPosition = Vector2.Lerp(level.GetComponent<RectTransform>().anchoredPosition, UIWIDTH, speed);
                        if (level.GetComponent<RectTransform>().anchoredPosition.x >= UIWIDTH.x- arrowAppear)
                        {
                            left.SetActive(false);
                            right.SetActive(true);
                            levelToLevelSet.SetActive(true);
                        }
                    }
                    isInGameSelect = true;
                    break;
                }
            case MENUSTATES.LEVEL2:
                {
                    level.SetActive(true);
                    levelSet.SetActive(false);

                    if (!isInGameSelect)
                    {
                        left.SetActive(true);
                        right.SetActive(true);
                        levelToLevelSet.SetActive(true);
                        level.GetComponent<RectTransform>().anchoredPosition = 0 * UIWIDTH;
                    }
                    else
                    {
                        level.GetComponent<RectTransform>().anchoredPosition = Vector2.Lerp(level.GetComponent<RectTransform>().anchoredPosition, 0 * UIWIDTH, speed);
                        if (level.GetComponent<RectTransform>().anchoredPosition.x <= 0 * UIWIDTH.x+ arrowAppear && isRightClick)
                        {
                            left.SetActive(true);
                            right.SetActive(true);
                            levelToLevelSet.SetActive(true);
                        }
                        else if (level.GetComponent<RectTransform>().anchoredPosition.x >= 0 * UIWIDTH.x - arrowAppear && !isRightClick)
                        {
                            left.SetActive(true);
                            right.SetActive(true);
                            levelToLevelSet.SetActive(true);
                        }
                    }
                        isInGameSelect = true;
                    break;
                }
            case MENUSTATES.LEVEL3:
                {
                    level.SetActive(true);
                    levelSet.SetActive(false);

                    if (!isInGameSelect)
                    {
                        left.SetActive(true);
                        right.SetActive(true);
                        levelToLevelSet.SetActive(true);
                        level.GetComponent<RectTransform>().anchoredPosition = -1 * UIWIDTH;
                    }
                    else
                    {
                        level.GetComponent<RectTransform>().anchoredPosition = Vector2.Lerp(level.GetComponent<RectTransform>().anchoredPosition, -1 * UIWIDTH, speed);
                        if (level.GetComponent<RectTransform>().anchoredPosition.x <= -1 * UIWIDTH.x + arrowAppear && isRightClick)
                        {
                            left.SetActive(true);
                            right.SetActive(true);
                            levelToLevelSet.SetActive(true);
                        }
                        else if (level.GetComponent<RectTransform>().anchoredPosition.x >= -1 * UIWIDTH.x - arrowAppear && !isRightClick)
                        {
                            left.SetActive(true);
                            right.SetActive(true);
                            levelToLevelSet.SetActive(true);
                        }
                    }

                    isInGameSelect = true;
                    break;
                }
            case MENUSTATES.LEVEL4:
                {
                    level.SetActive(true);
                    levelSet.SetActive(false);

                    if (!isInGameSelect)
                    {
                        left.SetActive(true);
                        right.SetActive(false);
                        levelToLevelSet.SetActive(true);
                        level.GetComponent<RectTransform>().anchoredPosition = -2*UIWIDTH;
                    }
                    else
                    {
                        level.GetComponent<RectTransform>().anchoredPosition = Vector2.Lerp(level.GetComponent<RectTransform>().anchoredPosition, -2*UIWIDTH, speed);
                        if (level.GetComponent<RectTransform>().anchoredPosition.x <= -2*UIWIDTH.x + arrowAppear)
                        {
                            left.SetActive(true);
                            right.SetActive(false);
                            levelToLevelSet.SetActive(true);
                        }
                    }
                    isInGameSelect = true;
                    break;
                }
        }

    }

    public void OnLevel1UI()
    {
        currentState = MENUSTATES.LEVEL1;
    }

    public void OnLevel2UI()
    {
        currentState = MENUSTATES.LEVEL2;
    }

    public void OnLevel3UI()
    {
        currentState = MENUSTATES.LEVEL3;
    }

    public void OnLevel4UI()
    {
        currentState = MENUSTATES.LEVEL4;
    }

    public void OnLevelSetUI()
    {
        currentState = MENUSTATES.LEVELSET;
    }

    public void ClickLeft()
    {
        switch (currentState)
        {
            case MENUSTATES.LEVEL2:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = false;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL1;
                    break;
                }
            case MENUSTATES.LEVEL3:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = false;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL2;
                    break;
                }
            case MENUSTATES.LEVEL4:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = false;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL3;
                    break;
                }
        }

    }

    public void ClickRight()
    {
        switch (currentState)
        {
            case MENUSTATES.LEVEL1:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = true;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL2;
                    break;
                }
            case MENUSTATES.LEVEL2:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = true;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL3;    
                    break;
                }
            case MENUSTATES.LEVEL3:
                {
                    left.SetActive(false);
                    right.SetActive(false);
                    isRightClick = true;
                    levelToLevelSet.SetActive(false);
                    currentState = MENUSTATES.LEVEL4;  
                    break;
                }
        }
    }
    public void OnMainMenu()
    {
    }
}

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Catapult_ShootCharacter : MonoBehaviour
{
    GameObject catapult;
    GameObject destination;
    Vector3 middlePoint;
    Vector3 delta;
    public float MAX_JUMP_HEIGHT = 5.0f;
    public float SHOOTING_SPEED = 3.0f;

    bool isOccupied;

    [HideInInspector] public Character capturedCharacter;
    [HideInInspector] public bool isButtonPressed;

    /* legacy code (Begin) */
    bool isCharacterFalling = false;
    bool isCharacterProjectileStarted = false;
    /* legacy code (End) */

    // Use this for initialization
    void Start ()
    {
        catapult = transform.GetChild(0).gameObject;
        destination = transform.GetChild(1).gameObject;

        isOccupied = false;
        isButtonPressed = false;
    }
	
	// Update is called once per frame
	void Update ()
    {
        if (!isOccupied && capturedCharacter)
        {
            capturedCharacter.isCaptured = true;
            isOccupied = true;
            capturedCharacter.transform.position = new Vector3(catapult.transform.position.x,
                                                                capturedCharacter.transform.position.y,
                                                                catapult.transform.position.z);
            middlePoint = (destination.transform.position + catapult.transform.position) / 2;
            middlePoint.y = MAX_JUMP_HEIGHT;
        }

        if (isOccupied && isButtonPressed && !isCharacterProjectileStarted)
        {
            isCharacterProjectileStarted = true;
            isCharacterFalling = false;
            capturedCharacter.rb.useGravity = false;
            capturedCharacter.characterCollision.enabled = false;
        }

        if (isCharacterProjectileStarted)
        {
            ShootCharacter();
        }
    }

    void ShootCharacter()
    {
        //capturedCharacter.transform.position = new Vector3(destination.transform.position.x,
        //                                                   capturedCharacter.transform.position.y,
        //                                                   destination.transform.position.z);

        if (!isCharacterFalling)
        {
            //Vector3 upForce = new Vector3(0, tempForce, 0);
            //tempForce -= Time.deltaTime;

            delta = middlePoint - capturedCharacter.transform.position;
            if (delta.magnitude < 0.5)
            //if (((jumpMiddlePoint.x - transform.position.x) * (jumpMiddlePoint.x - transform.position.x)
            //   + (jumpMiddlePoint.z - transform.position.z) * (jumpMiddlePoint.z - transform.position.z)) < 0.01)
            {
                isCharacterFalling = true;
                // Debug.Log(tempForce);
                //tempForce = 0;
            }

            //delta += upForce;
        }

        if (isCharacterFalling)
        {
            //Vector3 downForce = new Vector3(0, -tempForce, 0);
            //tempForce += Time.deltaTime;

            delta = destination.transform.position - capturedCharacter.transform.position;

            if (delta.magnitude < 0.5)
            //if (((destination.position.x - transform.position.x) * (destination.position.x - transform.position.x)
            //    + (destination.position.z - transform.position.z) * (destination.position.z - transform.position.z)) < 0.01)
            {
                isCharacterProjectileStarted = false;
                //  Debug.Log(tempForce);
            }

            //delta += downForce;
        }
        delta.Normalize();
        capturedCharacter.transform.Translate(delta * SHOOTING_SPEED * Time.deltaTime, Space.World);

        if (isCharacterProjectileStarted == false)
        {
            capturedCharacter.isCaptured = false;
            capturedCharacter.rb.useGravity = true;
            capturedCharacter.characterCollision.enabled = true;
            capturedCharacter = null;
            isOccupied = false;            
        }
    }
}

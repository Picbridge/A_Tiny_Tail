using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class CharacterManager : MonoBehaviour {

    private List<GameObject> characters = new List<GameObject>();
    private List<bool> isLocked = new List<bool>();
    private GameObject currentCharacter;
    private int currentIndex;
    public Text numberText;
    public Text nameText;
    public GameObject locker;

    #region Singleton

    public static CharacterManager instance; // variable to store the actual instance for the class object

    void Awake()
    {
        /* if object is already created */
        if (instance != null)
        {
            Debug.LogWarning("More than one instance of CharacterManager found!");
            return;
        }
        instance = this;
    }

    #endregion

    //private void OnEnable()
    //{
    //    if (NUM_OF_CHARACTERS > characters.Capacity)
    //        characters.Capacity = NUM_OF_CHARACTERS;
    //    characters.AddRange(new Character[NUM_OF_CHARACTERS - characters.Count]);
    //}

    // Use this for initialization
    void Start () {

        for (int i = 0; i < transform.childCount; ++i)
        {
            characters.Add(transform.GetChild(i).gameObject);
            isLocked.Add(true);
        }

        currentIndex = CharacterSelectionManager.instance.currentCharacterIndex;
        currentCharacter = characters[currentIndex];

        for (int i = 0; i < characters.Count; ++i)
            characters[i].SetActive(false);

        characters[currentIndex].SetActive(true);
        isLocked[0] = false; // Humburger is unlocked
        isLocked[1] = false; // RedDragon is unlocked

        numberText.text = (currentIndex + 1).ToString() + "/" + characters.Count.ToString();
        nameText.text = currentCharacter.name.ToString();
    }

    // Update is called once per frame
    void Update () {
        if (Input.GetKeyDown(KeyCode.D))
        {
            OnRightArrowClicked();
        }
        else if (Input.GetKeyDown(KeyCode.A))
        {
            OnLeftArrowClicked();
        }
        else if (Input.GetKeyDown(KeyCode.Return) || Input.GetKeyDown(KeyCode.Escape))
        {
            OnSelect();
        }
	}

    void ChangeCharacterSkin()
    {
        if (currentIndex < 0 || currentIndex >= characters.Count)
        {
            Debug.LogWarning("ChangeCharacterSkin() out of index");
            return;
        }

        //if (characters[index].locked)
        //{
        //    Debug.LogWarning("ChangeCharacterSkin() invalid index access");
        //    return;
        //}

        currentCharacter.gameObject.SetActive(false);
        currentCharacter = characters[currentIndex]; // 캐릭터가 가진 정보까지 바꿔야하나? // 씬 중간에 스킨을 바꿀 경우 정보 저장까지
        currentCharacter.gameObject.SetActive(true);
        numberText.text = (currentIndex + 1).ToString() + "/" + characters.Count.ToString();
        nameText.text = currentCharacter.name.ToString();
    }

    public void OnLeftArrowClicked()
    {
        --currentIndex;
        if (currentIndex < 0)
            currentIndex = characters.Count - 1;

        ChangeCharacterSkin();
        UpdateLocker();
    }

    public void OnRightArrowClicked()
    {
        ++currentIndex;
        if (currentIndex >= characters.Count)
            currentIndex = 0;

        ChangeCharacterSkin();
        UpdateLocker();
    }

    public void OnSelect()
    {
        CharacterSelectionManager.instance.OnCharacterSelect(currentIndex, isLocked[currentIndex]);
    }

    void UpdateLocker()
    {
        locker.SetActive(isLocked[currentIndex]);
    }

    public void AddCharacter(GameObject character)
    {
        for (int i = 0; i < characters.Count; ++i)
        {
            if (characters[i].name == character.name)
            {
                Debug.LogWarning("Duplicated character is on the list : " + character);
                return;
            }
        }

        characters.Add(character);
    }

    public void RemoveCharacter(GameObject character)
    {
        for (int i = 0; i < characters.Count; ++i)
        {
            if (characters[i].name == character.name)
            {
                characters.Remove(character);
                return;
            }
        }

        Debug.LogWarning("Character not on the list is attempted to delete : " + character);
    }
}
